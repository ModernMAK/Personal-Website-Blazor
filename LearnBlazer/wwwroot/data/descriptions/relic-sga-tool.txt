I'm a Warhammer 40K fan, and I've always loved Dawn of War: Dark Crusade. My personal favorite of the franchise is the Bane Blade, a massive trademark and staple of the Imperial Guard. Having played a bit with extracting game files, I thought it would be fun to extract the BaneBlade and some other soundbytes.

The first step I took was doing some research on the file format. Dawn Of War I is about 17 years old (2004-2021), the modding community has had plenty of time to learn about the game archives used. Sure enough, there was a bit of documentation for SGA Archives on the Xentax forums. This was enough to get me started unpacking the archives.

SGA Archives are fairly simple, but the <a href="https://github.com/ModernMAK/Relic-SGA-Archive-Tool/wiki/SGA-Archive">SGA-Archive</a> page may provide a better understanding than I can hear with just words. SGA archives consist of 'Drives', 'Folders' & 'Files, which has been packed into a single file. The first few bytes are a magic word '_Archive', and the Version, following that is the Archive Header which contians a few hashes and the name of the file. A Table-Of-Contents header, which tells us where the Table Of Contents is, how big it is, where the Data block begins, and the size of the Data block. Using the ToC header, we can then read the Data block and the Table Of Contents. The Table of Contents describes the mapping of Drives to Folders and Files, the mapping of Folders to Folders and Files, the mapping of Data to Files, and the mapping of File Paths to Drives, Folders and Files. The Data Block is a BLOB, and contains all the bytes required for every file in the archive.

With that knowledge, I was now able to extract any file in the game as it's native file format. This was handy for fetching a few stray .DDS and .TGA images, but unfortunately, most files in DOW I are proprietary. Specifically, they were Relic-Chunky files; another folder-file format. For a better explanation, see the <a href="https://github.com/ModernMAK/Relic-SGA-Archive-Tool/wiki/Relic-Chunky">Relic Chunky</a> page. Simply put, each file has a header to let us know what version to parse the file in, read a chunk header which would tell us it's size, then either read chunks from that chunk if it is a folder, or load the data in if it's a file. Much sipler than the SGA-Archive.

Knowing the containers layout, it was time to start digging into relic-chunky files. I began with FDA files arbitrarily, and decided to see if anyone knew what they were. Sure enough the modding community knew; they were audio files. Unfortunately for me, they were AIFF-C files that had been stripped of any uneccessary information, meaning I would need to rebuild the AIFF-C file to play them. By reviewing another modder's research and analyzing the output of a FDA to AIFF-C converter, I was able to reconstruct them. This was where I hit my second major block with FDA files. AIFF-C allows for arbitrary compression codecs, and the AIFF-C files extracted from the FDA used an arbitrary compression codec; Relic's own proprietary compression codec. Only after finding a compressor and decompressor, which I assume was distributed with their modding tools. The decompressor would then take my AIFF-C file and convert it to a standard WAV. With that, I could extract audio.

A breif side-project after finishing audio extraction was supporting UCS files, which is what Relic used for localization. The file is essentially a key-value pair of a number and text. This allowed me to give the files more meaningful names than '10052352.wav'.

Next I decided to tackle meshes. This wasn't the first time I have tried to extract models from an archive, having tried to extract a model of Max from Evil Genius 2. Sometime after stopping work on that, I found a decent piece of advice for examining model files. Because positions are always floats with the same precision, you can try and find a pattern in the exponent/mantissa of a float. Sure enough, once I was able to examine the vertex buffer, I discovered  the buffer was not interlaced, but packed, so that all positions could be read, than uvs, then normals, and so on. While I was not able to completely decipher the format, I was able to extract uvs, normals and positions just fine. With the additional information in the archive, it was much easier to get a whole asset after extracting compared to assets obtained by ripping the from the gpu using ninjaripper or other tools.

Lastly, I needed textures, while some textxures were in their normal formats; DDS or TGA. Others were relic chunkies, or mislabled. Mislabeling was an easy fix, by checking against the DDS magic word and fixing the extension as needed. Chunkies however were more difficult. Like FDA files, the Relic Chunky image formats stripped away most of the infromation from the DDS and TGA files. It was up to me to rebuild them with proper headers. After much digging into source code documentation, I managed to rebuild working DDS and TGA files.

While there were other chunky formats I could support I decided against it. Primarily assets that would be meaningless without the game, like stats for weapons or ability scritps. A few others like animation files I avoided because I could not figure out the Bone heiarchy for the armature. Later, I learned that this format was still being used by Relic; all the way to their game DOW III. So I tried to continue to extract assets for DOW II and DOW III, focusing on extracting models. With some minor changes to the code base to support later versions of the Archive and Chunky formats, I was able to support extracting SGA archives and Relic chunkies for all three games. Models can be dumped to a Wavefront Object and Material Library file for all three games. Textures can be extracted from the first game; and extracted from models in the later two games. Audio can be extracted from the first game, the second uses FMOD which I felt was too much to handle, and the third to my knowledge stores audio normally.

While not a full-suite extractor like I had hoped, the range of feature's are complete enough for an hobbyist gamer to rip their files as they please.